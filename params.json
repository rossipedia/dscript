{"tagline":"A little ol' scripting language","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"dscript\r\n=======\r\n\r\nThis is a little scripting language I put together when I was heavy\r\ninto c++ development and studying compiler theory. I haven't\r\ntouched this code since it was finished up and pushed out to the\r\nboost.spirit mailing list in November of 2003. Below are the original\r\nemails announcing its completion.\r\n\r\n**Note:** This does _not_ build on current compilers. The version of\r\nboost that it uses is horribly outdated. I'm going to try to update\r\nthis to current c++ compilers (g++, vs 2010/2012), but no guarantees\r\n\r\n-------------------------------------------------------------------------------\r\n\r\nSubject: [Spirit-general] Scripting Language  \r\nFrom: \"Bryan Ross\" ~~<me@daerid.com>~~ bryanjamesross@gmail.com  \r\nDate: Wed, 19 Nov 2003 18:46:04 -0800  \r\nTo: <spirit-general@lists.sourceforge.net>  \r\n\r\nHey all.\r\n\r\nWell, here it is. It's far from complete, and not 100% debugged, but it\r\nworks. There's a sample main.cpp in the archive that will compile and\r\nexecute the included test.txt file, which should demonstrate the syntax of\r\nthe language fairly well. Also, the entire spirit grammar is in\r\ncompiler.cpp, which will explicitly explain the syntax of the scripting\r\nlanguage.\r\n\r\nI'd love for all of you to take a look and give me any possible feedback.\r\nAlso, don't hesitate to rip it apart or improve on anything you see. The\r\nfact of the matter is, I don't have much time available right now to\r\nfinishing and polishing it up. I'd just figure I'd get something out there\r\nthat actually functions that others could take a look at and see how spirit\r\nmay be used for designing and implementing a scripting language.\r\n\r\nI wanted to upload this to http://spirit.sourceforge.net/dl/, but I forgot\r\nmy login password, and the password recovery system is borked, so I'll just\r\npost it to the newsgroup.\r\n\r\nAlso, to re-iterate, here is the post I made earlier, with some more info on\r\nthe language:\r\n\r\nPS: Joel, I've updated the files all to sport a very slightly modified\r\nversion of the spirit license.\r\n\r\nBryan Ross\r\n~~me@daerid.com~~\r\nbryanjamesross@gmail.com\r\n\r\n-------------------------------------------------------------------------------\r\n\r\n-----Original Message-----  \r\nFrom: Bryan Ross [me@daerid.com]  \r\nSent: Thursday, November 13, 2003 10:15 AM  \r\nTo: spirit-general@lists.sourceforge.net  \r\nSubject: [Spirit-general] script language sample [UPDATE]  \r\n\r\nHey all\r\n\r\nThis is just a heads up that I'm still working on this, and it's almost\r\ncomplete. I decided to go with a parse tree instead of an AST, which\r\nunfortunately added a lot of code to the compilation process, but IMO makes\r\nthe compiler more analogous to the parser and it also seems a bit easier to\r\nfollow.\r\n\r\nI don't know if you'd call this a \"simple\" scripting language sample though\r\n(almost 4000 lines of code).\r\n\r\nThe language has been dubbed \"DScript\".\r\n\r\nA few features:\r\n\r\n* C like syntax (what else?\r\n* Procedural language that supports both script defined and host environment\r\n  functions.\r\n* Multi-dimensional arrays.\r\n* 3 basic types: string, int, and double\r\n* Variables are typeless\r\n* Language defined local and global variables\r\n\t- %var (local variable, gets cleaned up at exit of current function)\r\n\t- $var (global variable, sticks around until manually deleted)\r\n\r\nSome notes on implementation:\r\n\r\n* Uses nothing but Spirit, Boost and the STD C++ library. Should be fully\r\nplatform independent.\r\n* Embedding into a host application is dead simple:\r\n    1. Include the source files in your project (or compile it into a .lib\r\n       file and link with that)\r\n    2. Include the dscript.hpp header\r\n    3. create a dscript::context object\r\n    4. call the methods of that context object to load and execute scripts.\r\n* Script code is compiled into byte-code that is executed by the runtime.\r\n* Script files may be compiled into a byte-code binary format for faster\r\n  loading time\r\n* dscript::context objects are fully encapsulated. You can have any number\r\n  created at any time.\r\n* Script functions may be called by the host application through the context\r\n  object.\r\n* Errors generated are output to a specified std::ostream\r\n\r\nHopefully this should be done in the next couple of days, and then I'm going\r\nto clean it up and prepare it for release.\r\nI'm planning on making it dependent on spirit 1.8, so at the very least I'll\r\nbe waiting until that release before this \"goes gold\".\r\n\r\nDScript will be released under the GNU Public License (GPL)\r\n\r\nOnce fully finished, I'll submit it to the spirit application repository,\r\nand if it's good enough, maybe you guys could package it as an example.\r\n\r\nBryan Ross\r\n~~me@daerid.com~~\r\nbryanjamesross@gmail.com\r\n\r\n","name":"Dscript"}